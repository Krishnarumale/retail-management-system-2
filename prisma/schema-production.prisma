// Production Prisma schema for PostgreSQL - Comprehensive Business Management System

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================
// CORE SYSTEM MODELS
// =============================================

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  email        String   @unique
  passwordHash String   @map("password_hash")
  firstName    String   @map("first_name")
  lastName     String   @map("last_name")
  role         UserRole @default(EMPLOYEE)
  isActive     Boolean  @default(true) @map("is_active")
  lastLogin    DateTime? @map("last_login")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relationships
  managedStores Store[] @relation("StoreManager")
  userStores    UserStore[]
  sales         Sale[]
  leads         Lead[] @relation("AssignedLeads")
  activities    Activity[]
  notifications Notification[]

  @@map("users")
}

enum UserRole {
  ADMIN
  MANAGER
  EMPLOYEE
  CASHIER
}

model Store {
  id        Int      @id @default(autoincrement())
  name      String
  address   String
  city      String
  state     String
  zipCode   String   @map("zip_code")
  phone     String?
  email     String?
  managerId Int      @map("manager_id")
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relationships
  manager    User        @relation("StoreManager", fields: [managerId], references: [id])
  userStores UserStore[]
  inventory  Inventory[]
  sales      Sale[]

  @@map("stores")
}

model UserStore {
  id      Int @id @default(autoincrement())
  userId  Int @map("user_id")
  storeId Int @map("store_id")

  // Relationships
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@unique([userId, storeId])
  @@map("user_stores")
}

// =============================================
// PRODUCT & INVENTORY MODELS
// =============================================

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relationships
  products Product[]

  @@map("categories")
}

model Supplier {
  id            Int      @id @default(autoincrement())
  name          String   @unique
  contactPerson String?  @map("contact_person")
  email         String?
  phone         String?
  address       String?
  city          String?
  state         String?
  zipCode       String?  @map("zip_code")
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relationships
  products       Product[]
  purchaseOrders PurchaseOrder[]

  @@map("suppliers")
}

model Product {
  id             Int      @id @default(autoincrement())
  sku            String   @unique
  name           String
  description    String?
  categoryId     Int      @map("category_id")
  supplierId     Int?     @map("supplier_id")
  costPrice      Decimal  @map("cost_price") @db.Decimal(10, 2)
  sellingPrice   Decimal  @map("selling_price") @db.Decimal(10, 2)
  minStockLevel  Int      @default(0) @map("min_stock_level")
  maxStockLevel  Int      @default(100) @map("max_stock_level")
  barcode        String?  @unique
  weight         Decimal? @db.Decimal(8, 3)
  dimensions     String?
  isActive       Boolean  @default(true) @map("is_active")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relationships
  category           Category            @relation(fields: [categoryId], references: [id])
  supplier           Supplier?           @relation(fields: [supplierId], references: [id])
  inventory          Inventory[]
  saleItems          SaleItem[]
  purchaseOrderItems PurchaseOrderItem[]

  @@map("products")
}

model Inventory {
  id               Int      @id @default(autoincrement())
  productId        Int      @map("product_id")
  storeId          Int      @map("store_id")
  quantityOnHand   Int      @default(0) @map("quantity_on_hand")
  quantityReserved Int      @default(0) @map("quantity_reserved")
  lastRestocked    DateTime? @map("last_restocked")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relationships
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  store   Store   @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@unique([productId, storeId])
  @@map("inventory")
}

// =============================================
// CUSTOMER & CRM MODELS
// =============================================

model Customer {
  id           Int          @id @default(autoincrement())
  customerCode String       @unique @map("customer_code")
  firstName    String       @map("first_name")
  lastName     String       @map("last_name")
  email        String?      @unique
  phone        String?
  address      String?
  city         String?
  state        String?
  zipCode      String?      @map("zip_code")
  dateOfBirth  DateTime?    @map("date_of_birth") @db.Date
  customerType CustomerType @default(REGULAR) @map("customer_type")
  isActive     Boolean      @default(true) @map("is_active")
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")

  // Relationships
  sales       Sale[]
  preferences CustomerPreferences?
  activities  Activity[]

  @@map("customers")
}

enum CustomerType {
  REGULAR
  VIP
  WHOLESALE
  CORPORATE
}

model CustomerPreferences {
  id                     Int                    @id @default(autoincrement())
  customerId             Int                    @unique @map("customer_id")
  emailNotifications     Boolean                @default(true) @map("email_notifications")
  smsNotifications       Boolean                @default(false) @map("sms_notifications")
  promotionalEmails      Boolean                @default(true) @map("promotional_emails")
  preferredContactMethod PreferredContactMethod @default(EMAIL) @map("preferred_contact_method")
  createdAt              DateTime               @default(now()) @map("created_at")
  updatedAt              DateTime               @updatedAt @map("updated_at")

  // Relationships
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("customer_preferences")
}

enum PreferredContactMethod {
  EMAIL
  PHONE
  SMS
  MAIL
}

model Lead {
  id             Int        @id @default(autoincrement())
  firstName      String     @map("first_name")
  lastName       String     @map("last_name")
  email          String?
  phone          String?
  company        String?
  source         String?
  status         LeadStatus @default(NEW)
  assignedTo     Int?       @map("assigned_to")
  estimatedValue Decimal?   @map("estimated_value") @db.Decimal(10, 2)
  notes          String?
  lastContactDate DateTime? @map("last_contact_date")
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")

  // Relationships
  assignedUser User? @relation("AssignedLeads", fields: [assignedTo], references: [id])
  activities   Activity[]

  @@map("leads")
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  CLOSED_WON
  CLOSED_LOST
}

// =============================================
// SALES & BILLING MODELS
// =============================================

model Sale {
  id           Int        @id @default(autoincrement())
  saleNumber   String     @unique @map("sale_number")
  customerId   Int?       @map("customer_id")
  userId       Int        @map("user_id")
  storeId      Int        @map("store_id")
  saleDate     DateTime   @default(now()) @map("sale_date")
  subtotal     Decimal    @db.Decimal(10, 2)
  taxAmount    Decimal    @default(0) @map("tax_amount") @db.Decimal(10, 2)
  discountAmount Decimal  @default(0) @map("discount_amount") @db.Decimal(10, 2)
  totalAmount  Decimal    @map("total_amount") @db.Decimal(10, 2)
  paymentMethod PaymentMethod @map("payment_method")
  status       SaleStatus @default(COMPLETED)
  notes        String?
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  // Relationships
  customer  Customer?  @relation(fields: [customerId], references: [id])
  user      User       @relation(fields: [userId], references: [id])
  store     Store      @relation(fields: [storeId], references: [id])
  saleItems SaleItem[]
  payments  Payment[]

  @@map("sales")
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  CHECK
  DIGITAL_WALLET
  BANK_TRANSFER
}

enum SaleStatus {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
}

model SaleItem {
  id         Int     @id @default(autoincrement())
  saleId     Int     @map("sale_id")
  productId  Int     @map("product_id")
  quantity   Int
  unitPrice  Decimal @map("unit_price") @db.Decimal(10, 2)
  totalPrice Decimal @map("total_price") @db.Decimal(10, 2)
  discount   Decimal @default(0) @db.Decimal(10, 2)

  // Relationships
  sale    Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("sale_items")
}

model Payment {
  id            Int           @id @default(autoincrement())
  saleId        Int           @map("sale_id")
  amount        Decimal       @db.Decimal(10, 2)
  paymentMethod PaymentMethod @map("payment_method")
  paymentDate   DateTime      @default(now()) @map("payment_date")
  reference     String?
  status        PaymentStatus @default(COMPLETED)
  createdAt     DateTime      @default(now()) @map("created_at")

  // Relationships
  sale Sale @relation(fields: [saleId], references: [id], onDelete: Cascade)

  @@map("payments")
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

// =============================================
// PURCHASE ORDER MODELS
// =============================================

model PurchaseOrder {
  id           Int                 @id @default(autoincrement())
  orderNumber  String              @unique @map("order_number")
  supplierId   Int                 @map("supplier_id")
  orderDate    DateTime            @default(now()) @map("order_date")
  expectedDate DateTime?           @map("expected_date")
  status       PurchaseOrderStatus @default(PENDING)
  subtotal     Decimal             @db.Decimal(10, 2)
  taxAmount    Decimal             @default(0) @map("tax_amount") @db.Decimal(10, 2)
  totalAmount  Decimal             @map("total_amount") @db.Decimal(10, 2)
  notes        String?
  createdAt    DateTime            @default(now()) @map("created_at")
  updatedAt    DateTime            @updatedAt @map("updated_at")

  // Relationships
  supplier Supplier              @relation(fields: [supplierId], references: [id])
  items    PurchaseOrderItem[]

  @@map("purchase_orders")
}

enum PurchaseOrderStatus {
  PENDING
  APPROVED
  ORDERED
  RECEIVED
  CANCELLED
}

model PurchaseOrderItem {
  id              Int     @id @default(autoincrement())
  purchaseOrderId Int     @map("purchase_order_id")
  productId       Int     @map("product_id")
  quantity        Int
  unitCost        Decimal @map("unit_cost") @db.Decimal(10, 2)
  totalCost       Decimal @map("total_cost") @db.Decimal(10, 2)

  // Relationships
  purchaseOrder PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  product       Product       @relation(fields: [productId], references: [id])

  @@map("purchase_order_items")
}

// =============================================
// ACTIVITY & NOTIFICATION MODELS
// =============================================

model Activity {
  id          Int          @id @default(autoincrement())
  type        ActivityType
  description String
  userId      Int?         @map("user_id")
  customerId  Int?         @map("customer_id")
  leadId      Int?         @map("lead_id")
  metadata    Json?
  createdAt   DateTime     @default(now()) @map("created_at")

  // Relationships
  user     User?     @relation(fields: [userId], references: [id])
  customer Customer? @relation(fields: [customerId], references: [id])
  lead     Lead?     @relation(fields: [leadId], references: [id])

  @@map("activities")
}

enum ActivityType {
  USER_LOGIN
  USER_LOGOUT
  SALE_CREATED
  CUSTOMER_CREATED
  CUSTOMER_UPDATED
  LEAD_CREATED
  LEAD_UPDATED
  PRODUCT_CREATED
  PRODUCT_UPDATED
  INVENTORY_UPDATED
}

model Notification {
  id        Int                @id @default(autoincrement())
  userId    Int                @map("user_id")
  title     String
  message   String
  type      NotificationType   @default(INFO)
  isRead    Boolean            @default(false) @map("is_read")
  createdAt DateTime           @default(now()) @map("created_at")

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum NotificationType {
  INFO
  WARNING
  ERROR
  SUCCESS
}
