// Enhanced Prisma schema for SQLite - Comprehensive Business Management System

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// =============================================
// CORE SYSTEM MODELS
// =============================================

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  email        String   @unique
  passwordHash String   @map("password_hash")
  firstName    String   @map("first_name")
  lastName     String   @map("last_name")
  role         String   // Changed from enum to string
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  managedStores      Store[]              @relation("StoreManager")
  userStores         UserStore[]
  createdPurchaseOrders PurchaseOrder[]   @relation("CreatedBy")
  inventoryMovements InventoryMovement[]
  sales              Sale[]               @relation("Cashier")
  processedReturns   Return[]             @relation("ProcessedBy")
  leadActivities     LeadActivity[]
  assignedLeads      Lead[]               @relation("AssignedTo")
  
  // Enhanced relations for new modules
  journalEntries     JournalEntry[]       @relation("JournalEntryCreator")
  expenses           Expense[]            @relation("ExpenseCreator")
  approvedExpenses   Expense[]            @relation("ExpenseApprover")
  budgets            Budget[]             @relation("BudgetCreator")
  financialReports   FinancialReport[]    @relation("ReportGenerator")
  projects           Project[]            @relation("ProjectManager")
  assignedTasks      Task[]               @relation("TaskAssignee")
  createdTasks       Task[]               @relation("TaskCreator")
  communications     Communication[]      @relation("CommunicationCreator")
  territories        SalesTerritory[]     @relation("TerritoryManager")
  commissions        Commission[]
  opportunities      Opportunity[]        @relation("OpportunityAssignee")

  @@map("users")
}

model Store {
  id        Int      @id @default(autoincrement())
  name      String
  address   String
  city      String
  state     String
  zipCode   String   @map("zip_code")
  phone     String?
  email     String?
  managerId Int?     @map("manager_id")
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  manager            User?                @relation("StoreManager", fields: [managerId], references: [id])
  userStores         UserStore[]
  inventory          Inventory[]
  purchaseOrders     PurchaseOrder[]
  sales              Sale[]
  invoices           Invoice[]
  returns            Return[]
  inventoryMovements InventoryMovement[]
  dailySalesSummary  DailySalesSummary[]
  
  // Enhanced relations for new modules
  expenses           Expense[]
  budgets            Budget[]
  financialReports   FinancialReport[]
  warehouses         Warehouse[]
  projects           Project[]
  territories        SalesTerritory[]

  @@map("stores")
}

model UserStore {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  storeId   Int      @map("store_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@unique([userId, storeId])
  @@map("user_stores")
}

// =============================================
// CRM MODULE MODELS
// =============================================

model Customer {
  id               Int       @id @default(autoincrement())
  customerCode     String    @unique @map("customer_code")
  firstName        String    @map("first_name")
  lastName         String    @map("last_name")
  email            String?
  phone            String?
  dateOfBirth      DateTime? @map("date_of_birth")
  address          String?
  city             String?
  state            String?
  zipCode          String?   @map("zip_code")
  customerType     String    @default("REGULAR") @map("customer_type") // Changed from enum
  loyaltyPoints    Int       @default(0) @map("loyalty_points")
  totalSpent       Float     @default(0.00) @map("total_spent") // Changed from Decimal
  lastPurchaseDate DateTime? @map("last_purchase_date")
  isActive         Boolean   @default(true) @map("is_active")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // Relations
  preferences         CustomerPreference?
  sales               Sale[]
  invoices            Invoice[]
  returns             Return[]
  loyaltyTransactions LoyaltyTransaction[]
  leads               Lead[]
  
  // Enhanced relations for new modules
  segments            CustomerSegment[]    @relation("CustomerSegments")
  communications      Communication[]
  interactions        CustomerInteraction[]
  analytics           CustomerAnalytics?
  opportunities       Opportunity[]

  @@map("customers")
}

model CustomerPreference {
  id                     Int      @id @default(autoincrement())
  customerId             Int      @unique @map("customer_id")
  emailNotifications     Boolean  @default(true) @map("email_notifications")
  smsNotifications       Boolean  @default(false) @map("sms_notifications")
  promotionalEmails      Boolean  @default(true) @map("promotional_emails")
  preferredContactMethod String   @default("EMAIL") @map("preferred_contact_method") // Changed from enum
  createdAt              DateTime @default(now()) @map("created_at")

  // Relations
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("customer_preferences")
}

model Lead {
  id                Int       @id @default(autoincrement())
  firstName         String    @map("first_name")
  lastName          String    @map("last_name")
  email             String?
  phone             String?
  source            String?
  status            String    @default("NEW") // Changed from enum
  assignedTo        Int?      @map("assigned_to")
  notes             String?
  estimatedValue    Float?    @map("estimated_value") // Changed from Decimal
  expectedCloseDate DateTime? @map("expected_close_date")
  customerId        Int?      @map("customer_id")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  assignedUser User?          @relation("AssignedTo", fields: [assignedTo], references: [id])
  customer     Customer?      @relation(fields: [customerId], references: [id])
  activities   LeadActivity[]
  opportunities Opportunity[]

  @@map("leads")
}

model LeadActivity {
  id            Int       @id @default(autoincrement())
  leadId        Int       @map("lead_id")
  userId        Int?      @map("user_id")
  activityType  String    @map("activity_type") // Changed from enum
  description   String
  scheduledDate DateTime? @map("scheduled_date")
  completedDate DateTime? @map("completed_date")
  createdAt     DateTime  @default(now()) @map("created_at")

  // Relations
  lead Lead  @relation(fields: [leadId], references: [id], onDelete: Cascade)
  user User? @relation(fields: [userId], references: [id])

  @@map("lead_activities")
}

model LoyaltyProgram {
  id               Int       @id @default(autoincrement())
  name             String
  description      String?
  pointsPerDollar  Float     @default(1.00) @map("points_per_dollar") // Changed from Decimal
  minimumPurchase  Float     @default(0.00) @map("minimum_purchase") // Changed from Decimal
  isActive         Boolean   @default(true) @map("is_active")
  startDate        DateTime? @map("start_date")
  endDate          DateTime? @map("end_date")
  createdAt        DateTime  @default(now()) @map("created_at")

  @@map("loyalty_programs")
}

model LoyaltyTransaction {
  id              Int      @id @default(autoincrement())
  customerId      Int      @map("customer_id")
  transactionType String   @map("transaction_type") // Changed from enum
  points          Int
  description     String?
  referenceId     Int?     @map("reference_id")
  createdAt       DateTime @default(now()) @map("created_at")

  // Relations
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("loyalty_transactions")
}
